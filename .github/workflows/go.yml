name: Deploy Go Web App

on:
  push:
    branches: [ main, acceptance ]  # Trigger the action on push to main or acceptance branch

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    - name: Install dependencies
      run: go mod download
    - name: Create app.env file
      run: |
        echo "POSTGRES_CONNECT_STRING=${{ secrets.POSTGRES_CONNECT_STRING }}" >> app.env
        echo "PORT=${{ secrets.PORT }}" >> app.env
        echo "DOMAIN=${{ secrets.DOMAIN }}" >> app.env
        echo "CLIENT_ORIGIN=${{ secrets.CLIENT_ORIGIN }}" >> app.env
        echo "ACCESS_TOKEN_PRIVATE_KEY=${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}" >> app.env
        echo "ACCESS_TOKEN_PUBLIC_KEY=${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}" >> app.env
        echo "REFRESH_TOKEN_PRIVATE_KEY=${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}" >> app.env
        echo "REFRESH_TOKEN_PUBLIC_KEY=${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}" >> app.env
        echo "ACCESS_TOKEN_EXPIRED_IN=${{ secrets.ACCESS_TOKEN_EXPIRED_IN }}" >> app.env
        echo "REFRESH_TOKEN_EXPIRED_IN=${{ secrets.REFRESH_TOKEN_EXPIRED_IN }}" >> app.env
        echo "ACCESS_TOKEN_MAXAGE=${{ secrets.ACCESS_TOKEN_MAXAGE }}" >> app.env
        echo "REFRESH_TOKEN_MAXAGE=${{ secrets.REFRESH_TOKEN_MAXAGE }}" >> app.env
    - name: Run tests
      run: go test ./tests/... -v

  deploy:
    needs: test  # This job depends on the test job
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    - name: Build
      env:
        CGO_ENABLED: 0
        GOOS: linux
        GOARCH: amd64
      run: go build -a -ldflags '-extldflags "-static"' -o main
    - name: Create deployment package
      run: |
        mkdir deploy
        shopt -s extglob dotglob
        cp -R !(deploy) deploy/
        tar -czf deploy.tar.gz -C deploy .
    - name: Deploy to VPS
      env:
        PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
        HOST: ${{ secrets.SERVER_HOST }}
        USER: ${{ secrets.SERVER_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        scp -i private_key -o StrictHostKeyChecking=no deploy.tar.gz $USER@$HOST:/home/$USER/deploy.tar.gz
        ssh -i private_key -o StrictHostKeyChecking=no $USER@$HOST '
          if [[ "${{ github.ref }}" == "refs/heads/acceptance" ]]; then
            DEPLOY_FOLDER="/go-acceptance"
            SERVICE_NAME="goacceptance"
            ENV_FILE="/env/goacceptance/app.env"
          else
            DEPLOY_FOLDER="/go-web"
            SERVICE_NAME="goweb"
            ENV_FILE="/env/goweb/app.env"
          fi &&
          sudo service $SERVICE_NAME stop &&
          sudo rm -rf $DEPLOY_FOLDER/* &&
          sudo tar -xzf /home/$USER/deploy.tar.gz -C $DEPLOY_FOLDER &&
          sudo cp $ENV_FILE $DEPLOY_FOLDER/app.env &&
          sudo service $SERVICE_NAME start &&
          sudo mkdir -p /logs &&
          echo "Deployment completed at $(date)" | sudo tee -a /logs/deployment.log &&
          echo "Service status:" | sudo tee -a /logs/deployment.log &&
          sudo service $SERVICE_NAME status | sudo tee -a /logs/deployment.log &&
          echo "----------------------------------------" | sudo tee -a /logs/deployment.log &&
          rm /home/$USER/deploy.tar.gz
        '
        rm -f private_key

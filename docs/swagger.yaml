basePath: /api
definitions:
  models.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      passwordConfirm:
        type: string
    required:
    - email
    - name
    - password
    - passwordConfirm
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      provider:
        type: string
      role:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A REST API for Tableye application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tableye API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access/refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - authentication
  /auth/logout:
    post:
      description: Clear authentication cookies
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties: true
            type: object
      summary: Logout user
      tags:
      - authentication
  /auth/refresh:
    post:
      description: Get a new access token using refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Invalid refresh token
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - authentication
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "502":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - authentication
  /healthchecker:
    get:
      consumes:
      - application/json
      description: Get API health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
